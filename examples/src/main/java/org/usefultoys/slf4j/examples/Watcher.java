/*
 * Copyright 2015 Daniel Felix Ferber.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.usefultoys.slf4j.examples;

import org.usefultoys.slf4j.LoggerFactory;
import org.usefultoys.slf4j.Session;
import org.usefultoys.slf4j.internal.SystemConfig;
import org.usefultoys.slf4j.watcher.WatcherConfig;
import org.usefultoys.slf4j.watcher.WatcherSingleton;

/**
 * Demonstrates the default report generated by {@link Session#runDefaultReport()}, but using a custom logger.
 *
 * @author Daniel Felix Ferber
 */
public class Watcher {

    public static void main(String[] args) {
        System.setProperty("org.slf4j.simpleLogger.defaultLogLevel", "trace");
        
        /* Attributes that ma optionally customize Watcher behavior. */
        WatcherConfig.delayMilliseconds=2000;
        WatcherConfig.periodMilliseconds=1000;
        SystemConfig.useClassLoadingManagedBean=true;
        SystemConfig.useCompilationManagedBean=true;
        SystemConfig.useGarbageCollectionManagedBean=true;
        SystemConfig.useMemoryManagedBean=true;
        SystemConfig.usePlatformManagedBean=true;
        
        try {
            WatcherSingleton.startDefaultWatcherTimer();
            doStuff();
            doStuff();
            doStuff();
        } finally {
            WatcherSingleton.stopDefaultWatcherTimer();
        }
    }

    private static void doStuff() {
        try {
            LoggerFactory.getLogger(Watcher.class).info("Wait more 2 seconds...");
            Thread.sleep(2000);
        } catch (InterruptedException ex) {
            // ignore
        }
    }
}
